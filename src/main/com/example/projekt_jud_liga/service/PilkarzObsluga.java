
package com.example.projekt_jud_liga.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.projekt_jud_liga.domain.Pilkarz;

public class PilkarzObsluga {
	 private Connection connection;

	 private String url = "jdbc:hsqldb:hsql://localhost/workdb"; /*"jdbc:hsqldb:mem:workdb";*/
	 
	 private String stworzTabelePilkarz = "CREATE TABLE Pilkarz(id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, idKlubu integer,  imie varchar(20), nazwisko varchar(20), pozycja varchar(20))";
	 private String dodajPilkarzowiUI = "CREATE UNIQUE INDEX ORDER_FK1 ON Pilkarz (id)";
	 private String dodajPilkarzowiFK = "ALTER TABLE Pilkarz ADD CONSTRAINT bv FOREIGN KEY (idKlubu) REFERENCES Klub (id)";
	 
	 	private PreparedStatement dodajPilkarzaStmt; 
	    private PreparedStatement usunPilkarzaStmt;
	    private PreparedStatement pokazWszystkichPilkarzyStmt;
	    
	    private Statement statement;
	    
	    
	    public PilkarzObsluga()
	    {
	        try
	        {
	            connection = DriverManager.getConnection(url);
	            statement = connection.createStatement();
	        	
				ResultSet rs = connection.getMetaData().getTables(null, null, null,null);
				boolean tableExists = false;
				while (rs.next()) {
					if ("Pilkarz".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
						tableExists = true;
						break;
					}
				}
	        	
				if (!tableExists)
					statement.executeUpdate(stworzTabelePilkarz);

				dodajPilkarzaStmt = connection
						.prepareStatement("INSERT INTO Pilkarz ( idKlubu, imie, nazwisko, pozycja) VALUES (?, ?, ?, ?, ?)");
				usunPilkarzaStmt = connection
						.prepareStatement("DELETE FROM Pilkarz");
				pokazWszystkichPilkarzyStmt = connection
						.prepareStatement("SELECT id, idKlubu, imie, nazwisko, pozycja FROM Pilkarz");

			} catch (SQLException e) {
				e.printStackTrace();
			}
	    }
	    
		Connection getConnection() {
			return connection;
		}
		
		void wyczyscPilkarzy() {
			try {
				pokazWszystkichPilkarzyStmt.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		public int dodajPilkarza(Pilkarz pilkarz) {
			int count = 0;
			try {
				dodajPilkarzaStmt.setInt(1, pilkarz.getIdKlubu());
				dodajPilkarzaStmt.setString(2, pilkarz.getImie());
				dodajPilkarzaStmt.setString(3, pilkarz.getNazwisko());
				dodajPilkarzaStmt.setString(4, pilkarz.getPozycja());

				count = dodajPilkarzaStmt.executeUpdate();

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return count;
		}
		
		public List<Pilkarz> pokazWszystkichPilkarzy() {
			List<Pilkarz> pilkarze = new ArrayList<Pilkarz>();

			try {
				ResultSet rs = pokazWszystkichPilkarzyStmt.executeQuery();

				while (rs.next()) {
					Pilkarz p = new Pilkarz();
					p.setId(rs.getInt("id"));
					p.setIdKlubu(rs.getInt("idKlubu"));
					p.setImie(rs.getString("imie"));
					p.setNazwisko(rs.getString("nazwisko"));
					p.setPozycja(rs.getString("pozycja"))
					pilkarze.add(p);
				}

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return pilkarze;
		}
}
